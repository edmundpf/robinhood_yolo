{
  "version": 3,
  "file": "test.js",
  "sourceRoot": "../../src/tests/",
  "sources": [
    "test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "a = require('../utils/apiMaster')(newLogin: true)\np = require 'print-tools-js'\nchalk = require 'chalk'\nassert = require('chai').assert\nshould = require('chai').should()\n\n#: List Preset\n\npresetList = (func, key, arg1, arg2, arg3, arg4, arg5, arg6) ->\n\tdata = null\n\tbefore(() ->\n\t\tthis.timeout(15000)\n\t\tdata = await func.bind(a)(arg1, arg2, arg3, arg4, arg5, arg6)\n\t)\n\tit 'Returns array', ->\n\t\tdata.should.be.a('array')\n\tit 'Key exists', ->\n\t\tassert.equal(data[0][key]?, true)\n\n#: Object Preset\n\npresetObject = (func, key, arg1, arg2, arg3, arg4, arg5, arg6) ->\n\tdata = null\n\tbefore(() ->\n\t\tthis.timeout(15000)\n\t\tdata = await func.bind(a)(arg1, arg2, arg3, arg4, arg5, arg6)\n\t)\n\tit 'Returns object', ->\n\t\tdata.should.be.a('object')\n\tit 'Key exists', ->\n\t\tassert.equal(data[key]?, true)\n\n#: Test Constructor\n\ndescribe 'constructor()', ->\n\tbefore(() ->\n\t\tawait a.login()\n\t)\n\tit 'Is object', ->\n\t\ta.should.be.a('object')\n\tit 'Has username', ->\n\t\ta.username.should.be.a('string')\n\tit 'Has access token', ->\n\t\ta.accessToken.should.be.a('string')\n\tit 'Has refresh token', ->\n\t\ta.refreshToken.should.be.a('string')\n\tit 'Has auth token', ->\n\t\tassert.equal(a.authToken.indexOf('Bearer'), 0)\n\tit 'Has account URL', ->\n\t\ta.accountUrl.should.be.a('string')\n\n#: Test Account\n\ndescribe 'account()', ->\n\tpresetObject(\n\t\ta.getAccount,\n\t\t'margin_balances'\n\t)\n\n#: Test Market Hours\n\ndescribe 'getMarketHours()', ->\n\tpresetObject(\n\t\ta.getMarketHours,\n\t\t'is_open'\n\t\t'2019-07-04'\n\t)\n\n#: Test Transfers\n\ndescribe 'getTransfers()', ->\n\tpresetList(\n\t\ta.getTransfers,\n\t\t'scheduled'\n\t)\n\n#: Test Quotes for single instrument\n\ndescribe 'quotes() - single', ->\n\tpresetObject(\n\t\ta.quotes,\n\t\t'chain_data',\n\t\t'GE',\n\t\tchainData: true\n\t)\n\n#: Test Quotes for multiple instruments\n\ndescribe 'quotes() - multiple', ->\n\tpresetList(\n\t\ta.quotes,\n\t\t'chain_data',\n\t\t['GE', 'AAPL'],\n\t\tchainData: true\n\t)\n\n#: Test Historicals\n\ndescribe 'historicals()', ->\n\tpresetList(\n\t\ta.historicals,\n\t\t'close_price',\n\t\t'GE',\n\t\tinterval: 'day'\n\t\tspan: 'year'\n\t\tbounds: 'regular'\n\t)\n\tit 'Test Multiple instruments', ->\n\t\tdata = await a.historicals(['GE', 'AAPL'])\n\t\tdata[0].should.be.a('array')\n\n#: Test Get Options\n\ndescribe 'getOptions()', ->\n\tpresetList(\n\t\ta.getOptions,\n\t\t'market_data',\n\t\t'GE',\n\t\t'2021-01-15',\n\t\toptionType: 'call'\n\t\tmarketData: true\n\t)\n\n#: Test Find Options for single option\n\ndescribe 'findOptions() - single', ->\n\tpresetObject(\n\t\ta.findOptions,\n\t\t'market_data',\n\t\t'GE',\n\t\t'2021-01-15',\n\t\toptionType: 'call'\n\t\tstrikeType: 'itm'\n\t\tstrikeDepth: 0\n\t\tmarketData: true\n\t)\n\n#: Test Find Options by strike price\n\ndescribe 'findOptions() - strike', ->\n\tpresetObject(\n\t\ta.findOptions,\n\t\t'market_data',\n\t\t'GE',\n\t\t'2021-01-15',\n\t\toptionType: 'call'\n\t\tstrike: 11.00\n\t\tmarketData: true\n\t)\n\n#: Test Find Options for multiple options\n\ndescribe 'findOptions() - range', ->\n\tpresetList(\n\t\ta.findOptions,\n\t\t'strike_price',\n\t\t'GE',\n\t\t'2021-01-15',\n\t\toptionType: 'call'\n\t\trange: 3\n\t)\n\n#: Test Options Positions for all\n\ndescribe 'optionsPositions() - all', ->\n\tpresetList(\n\t\ta.optionsPositions,\n\t\t'chain_symbol',\n\t\tmarketData: false\n\t\torderData: false\n\t\topenOnly: false\n\t)\n\n#: Test Options Positions for open only\n\ndescribe 'optionsPositions() - open only', ->\n\tdata = null\n\tbefore(() ->\n\t\tthis.timeout(15000)\n\t\tdata = await a.optionsPositions(\n\t\t\tmarketData: true\n\t\t\torderData: true\n\t\t)\n\t)\n\tit 'Returns array', ->\n\t\tdata.should.be.a('array')\n\tif data? && data.length != 0\n\t\tit 'Key exists', ->\n\t\t\tassert.equal(data[0]['market_data']?, true)\n\telse\n\t\tp.error(chalk'No open positions, skipping {cyan optionsPositions() - open only} - {magenta Key exists}.')\n\n#: Test Options Orders for all orders\n\ndescribe 'optionsOrders() - all', ->\n\tpresetList(\n\t\ta.optionsOrders,\n\t\t'legs',\n\t)\n\n#: Test Options Orders for not filled\n\ndescribe 'optionsOrders() - not filled', ->\n\tdata = null\n\tbefore(() ->\n\t\tthis.timeout(15000)\n\t\tdata = await a.optionsOrders(\n\t\t\tnotFilled: true\n\t\t)\n\t)\n\tit 'Returns array', ->\n\t\tdata.should.be.a('array')\n\tif data? && data.length != 0\n\t\tit 'Key exists', ->\n\t\t\tassert.equal(data[0]['legs']?, true)\n\telse\n\t\tp.error(chalk'No unfilled orders, skipping {cyan optionsOrders() - not filled} - {magenta Key exists}.')\n\n#: Test Options Orders for single order\n\ndescribe 'optionsOrders() - single', ->\n\tpresetObject(\n\t\ta.optionsOrders,\n\t\t'legs',\n\t\tid: 'af8d5deb-df2f-42a7-974e-7e16729937f7'\n\t)\n\n#: Test Placing Options orders, replacing, and canceling\n\ndescribe 'Placing Orders', ->\n\tdata = buy = replace = cancel = null\n\tclosedMarkets = false\n\tbefore(() ->\n\t\tthis.timeout(15000)\n\t\tcurTime = new Date()\n\t\tdateNum = (curTime.getHours() * 10000) + (curTime.getMinutes() * 100) + curTime.getSeconds()\n\t\tif dateNum > 160100\n\t\t\tclosedMarkets = true\n\t\t\tdata = await a.findOptions(\n\t\t\t\t'TSLA',\n\t\t\t\t'2021-01-15',\n\t\t\t\tstrikeDepth: 3\n\t\t\t)\n\t\t\tbuy = await a.placeOptionOrder(data.url, 1, 0.01)\n\t\t\treplace = await a.replaceOptionOrder(1, 0.02, { orderId: buy.id })\n\t\t\tcancel = await a.cancelOptionOrder(replace.cancel_url)\n\t)\n\tif closedMarkets\n\t\tp.success('Markets are closed, will test placing orders.')\n\t\tit 'Buy returns object', ->\n\t\t\tbuy.should.be.a('object')\n\t\tit 'Buy key exists', ->\n\t\t\tassert.equal(buy.id?, true)\n\t\tit 'Replace returns object', ->\n\t\t\treplace.should.be.a('object')\n\t\tit 'Replace key exists', ->\n\t\t\tassert.equal(replace.id?, true)\n\t\tit 'Cancel returns true', ->\n\t\t\tassert.equal(cancel, true)\n\telse\n\t\tp.error(chalk'Markets are open, will not test placing orders, skipping {cyan Placing Orders} - {magenta all}.')\n\n#::: End Program :::"
  ]
}