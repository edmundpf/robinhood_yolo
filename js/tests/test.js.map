{
  "version": 3,
  "file": "test.js",
  "sourceRoot": "../../src/tests/",
  "sources": [
    "test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "a = require('../utils/apiMaster')(newLogin: true)\np = require 'print-tools-js'\nchalk = require 'chalk'\nconfigData = require '../data/config.json'\nassert = require('chai').assert\nshould = require('chai').should()\n\n#: List Preset\n\npresetList = (func, key, arg1, arg2, arg3, arg4, arg5, arg6) ->\n\tdata = null\n\tbefore(() ->\n\t\tthis.timeout(15000)\n\t\tdata = await func.bind(a)(arg1, arg2, arg3, arg4, arg5, arg6)\n\t)\n\tit 'Returns array', ->\n\t\tdata.should.be.a('array')\n\tit 'Key exists', ->\n\t\tassert.equal(data[0][key]?, true)\n\n#: Object Preset\n\npresetObject = (func, key, arg1, arg2, arg3, arg4, arg5, arg6) ->\n\tdata = null\n\tbefore(() ->\n\t\tthis.timeout(15000)\n\t\tdata = await func.bind(a)(arg1, arg2, arg3, arg4, arg5, arg6)\n\t)\n\tit 'Returns object', ->\n\t\tdata.should.be.a('object')\n\tit 'Key exists', ->\n\t\tassert.equal(data[key]?, true)\n\nif configData.length > 0\n\n\t#: Test Constructor\n\n\tdescribe 'constructor()', ->\n\t\tbefore(() ->\n\t\t\tawait a.login()\n\t\t)\n\t\tit 'Is object', ->\n\t\t\ta.should.be.a('object')\n\t\tit 'Has username', ->\n\t\t\ta.username.should.be.a('string')\n\t\tit 'Has access token', ->\n\t\t\ta.accessToken.should.be.a('string')\n\t\tit 'Has refresh token', ->\n\t\t\ta.refreshToken.should.be.a('string')\n\t\tit 'Has auth token', ->\n\t\t\tassert.equal(a.authToken.indexOf('Bearer'), 0)\n\t\tit 'Has account URL', ->\n\t\t\ta.accountUrl.should.be.a('string')\n\n\t#: Test Account\n\n\tdescribe 'account()', ->\n\t\tpresetObject(\n\t\t\ta.getAccount,\n\t\t\t'margin_balances'\n\t\t)\n\n\t#: Test Market Hours\n\n\tdescribe 'getMarketHours()', ->\n\t\tpresetObject(\n\t\t\ta.getMarketHours,\n\t\t\t'is_open'\n\t\t\t'2019-07-04'\n\t\t)\n\n\t#: Test Transfers\n\n\tdescribe 'getTransfers()', ->\n\t\tpresetList(\n\t\t\ta.getTransfers,\n\t\t\t'scheduled'\n\t\t)\n\n\t#: Test Quotes for single instrument\n\n\tdescribe 'quotes() - single', ->\n\t\tpresetObject(\n\t\t\ta.quotes,\n\t\t\t'chain_data',\n\t\t\t'GE',\n\t\t\tchainData: true\n\t\t)\n\n\t#: Test Quotes for multiple instruments\n\n\tdescribe 'quotes() - multiple', ->\n\t\tpresetList(\n\t\t\ta.quotes,\n\t\t\t'chain_data',\n\t\t\t['GE', 'AAPL'],\n\t\t\tchainData: true\n\t\t)\n\n\t#: Test Historicals\n\n\tdescribe 'historicals()', ->\n\t\tpresetList(\n\t\t\ta.historicals,\n\t\t\t'close_price',\n\t\t\t'GE',\n\t\t\tinterval: 'day'\n\t\t\tspan: 'year'\n\t\t\tbounds: 'regular'\n\t\t)\n\t\tit 'Test Multiple instruments', ->\n\t\t\tdata = await a.historicals(['GE', 'AAPL'])\n\t\t\tdata[0].should.be.a('array')\n\n\t#: Test Get Options\n\n\tdescribe 'getOptions()', ->\n\t\tpresetList(\n\t\t\ta.getOptions,\n\t\t\t'market_data',\n\t\t\t'GE',\n\t\t\t'2021-01-15',\n\t\t\toptionType: 'call'\n\t\t\tmarketData: true\n\t\t)\n\n\t#: Test Find Options for single option\n\n\tdescribe 'findOptions() - single', ->\n\t\tpresetObject(\n\t\t\ta.findOptions,\n\t\t\t'market_data',\n\t\t\t'GE',\n\t\t\t'2021-01-15',\n\t\t\toptionType: 'call'\n\t\t\tstrikeType: 'itm'\n\t\t\tstrikeDepth: 0\n\t\t\tmarketData: true\n\t\t)\n\n\t#: Test Find Options by strike price\n\n\tdescribe 'findOptions() - strike', ->\n\t\tpresetObject(\n\t\t\ta.findOptions,\n\t\t\t'market_data',\n\t\t\t'GE',\n\t\t\t'2021-01-15',\n\t\t\toptionType: 'call'\n\t\t\tstrike: 11.00\n\t\t\tmarketData: true\n\t\t)\n\n\t#: Test Find Options for multiple options\n\n\tdescribe 'findOptions() - range', ->\n\t\tpresetList(\n\t\t\ta.findOptions,\n\t\t\t'strike_price',\n\t\t\t'GE',\n\t\t\t'2021-01-15',\n\t\t\toptionType: 'call'\n\t\t\trange: 3\n\t\t)\n\n\t#: Test Options Positions for all\n\n\tdescribe 'optionsPositions() - all', ->\n\t\tpresetList(\n\t\t\ta.optionsPositions,\n\t\t\t'chain_symbol',\n\t\t\tmarketData: false\n\t\t\torderData: false\n\t\t\topenOnly: false\n\t\t)\n\n\t#: Test Options Positions for open only\n\n\tdescribe 'optionsPositions() - open only', ->\n\t\tdata = null\n\t\tbefore(() ->\n\t\t\tthis.timeout(15000)\n\t\t\tdata = await a.optionsPositions(\n\t\t\t\tmarketData: true\n\t\t\t\torderData: true\n\t\t\t)\n\t\t)\n\t\tit 'Returns array', ->\n\t\t\tdata.should.be.a('array')\n\t\tif data? && data.length != 0\n\t\t\tit 'Key exists', ->\n\t\t\t\tassert.equal(data[0]['market_data']?, true)\n\t\telse\n\t\t\tp.error(chalk'No open positions, skipping {cyan optionsPositions() - open only} - {magenta Key exists}.')\n\n\t#: Test Options Orders for all orders\n\n\tdescribe 'optionsOrders() - all', ->\n\t\tpresetList(\n\t\t\ta.optionsOrders,\n\t\t\t'legs',\n\t\t)\n\n\t#: Test Options Orders for not filled\n\n\tdescribe 'optionsOrders() - not filled', ->\n\t\tdata = null\n\t\tbefore(() ->\n\t\t\tthis.timeout(15000)\n\t\t\tdata = await a.optionsOrders(\n\t\t\t\tnotFilled: true\n\t\t\t)\n\t\t)\n\t\tit 'Returns array', ->\n\t\t\tdata.should.be.a('array')\n\t\tif data? && data.length != 0\n\t\t\tit 'Key exists', ->\n\t\t\t\tassert.equal(data[0]['legs']?, true)\n\t\telse\n\t\t\tp.error(chalk'No unfilled orders, skipping {cyan optionsOrders() - not filled} - {magenta Key exists}.')\n\n\t#: Test Options Orders for single order\n\n\tdescribe 'optionsOrders() - single', ->\n\t\tpresetObject(\n\t\t\ta.optionsOrders,\n\t\t\t'legs',\n\t\t\tid: 'af8d5deb-df2f-42a7-974e-7e16729937f7'\n\t\t)\n\n\t#: Test Placing Options orders, replacing, and canceling\n\n\tdescribe 'Placing Orders', ->\n\t\tdata = buy = replace = cancel = null\n\t\tclosedMarkets = false\n\t\tbefore(() ->\n\t\t\tthis.timeout(15000)\n\t\t\tcurTime = new Date()\n\t\t\tdateNum = (curTime.getHours() * 10000) + (curTime.getMinutes() * 100) + curTime.getSeconds()\n\t\t\tif dateNum > 160100\n\t\t\t\tclosedMarkets = true\n\t\t\t\tdata = await a.findOptions(\n\t\t\t\t\t'TSLA',\n\t\t\t\t\t'2021-01-15',\n\t\t\t\t\tstrikeDepth: 3\n\t\t\t\t)\n\t\t\t\tbuy = await a.placeOptionOrder(data.url, 1, 0.01)\n\t\t\t\treplace = await a.replaceOptionOrder(1, 0.02, { orderId: buy.id })\n\t\t\t\tcancel = await a.cancelOptionOrder(replace.cancel_url)\n\t\t)\n\t\tif closedMarkets\n\t\t\tp.success('Markets are closed, will test placing orders.')\n\t\t\tit 'Buy returns object', ->\n\t\t\t\tbuy.should.be.a('object')\n\t\t\tit 'Buy key exists', ->\n\t\t\t\tassert.equal(buy.id?, true)\n\t\t\tit 'Replace returns object', ->\n\t\t\t\treplace.should.be.a('object')\n\t\t\tit 'Replace key exists', ->\n\t\t\t\tassert.equal(replace.id?, true)\n\t\t\tit 'Cancel returns true', ->\n\t\t\t\tassert.equal(cancel, true)\n\t\telse\n\t\t\tp.error(chalk'Markets are open, will not test placing orders, skipping {cyan Placing Orders} - {magenta all}.')\n\nelse\n\tp.error('No accounts in config file. Exiting.')\n\n#::: End Program :::"
  ]
}